package com.pl.plugins.commons.ui.uinew.domain.view.validation.ui;

import com.pl.plugins.commons.ui.uinew.domain.view.i18n.NbBundle;
import com.pl.plugins.commons.ui.uinew.core.error.ErrorManager;
import com.pl.plugins.core.WindowManager;
import com.pl.plugins.core.CorePlugin;
import com.pl.plugins.core.IWindowManager;


import javax.swing.*;
import java.io.Serializable;


/**
 * Created by IntelliJ IDEA.
 * User: Lazarenko.Dmitry
 * Date: 13.02.2009
 * Time: 12:06:35
 */
public final class ValidationResultFormTopComponent extends JPanel {

    private static ValidationResultFormTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "ValidationResultFormTopComponent";

    private ValidationResultFormTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ValidationResultFormTopComponent.class, "CTL_ValidationResultFormTopComponent"));
        setToolTipText(NbBundle.getMessage(ValidationResultFormTopComponent.class, "HINT_ValidationResultFormTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        validationTabbedPane = new javax.swing.JTabbedPane();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(validationTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(validationTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>


    // Variables declaration - do not modify
    private javax.swing.JTabbedPane validationTabbedPane;
    // End of variables declaration

    public javax.swing.JTabbedPane getContentPane(){
        return this.validationTabbedPane;
    }

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     */
    public static synchronized ValidationResultFormTopComponent getDefault() {
        if (instance == null) {
            instance = new ValidationResultFormTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ValidationResultFormTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ValidationResultFormTopComponent findInstance() {
        JPanel win = ((IWindowManager)CorePlugin.getAppContext().getBean("windowManager")).findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find ValidationResultForm component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ValidationResultFormTopComponent) {
            return (ValidationResultFormTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }


    public void componentOpened() {
    }

    public void componentClosed() {
    }

    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return ValidationResultFormTopComponent.getDefault();
        }
    }

}
